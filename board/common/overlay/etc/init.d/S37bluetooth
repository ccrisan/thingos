#!/bin/bash

SYS_CONF="/etc/bluetooth.conf"
BOOT_CONF="/boot/bluetooth.conf"
CONF="/data/etc/bluetooth.conf"
RUN_CONF="/var/lib/bluetooth.conf"

ADAPTER="hci0"
ADAPTER_PATH="/sys/class/bluetooth/${ADAPTER}"
ADAPTER_TIMEOUT=10
PROG="/usr/libexec/bluetooth/bluetoothd"
PROG_CTL="/usr/bin/bluetoothctl"
DATA_DIR="/var/lib/bluetooth"
RUN_DATA_DIR="/data/bluetooth"
NO_ON_BOARD_BT="/tmp/.no_on_board_bt"  # used by RPi to explicitly indicate that no on-board BT was detected


test -x ${PROG} || exit 0

test -n "${OS_VERSION}" || source /etc/init.d/base

prepare_conf ${CONF} ${SYS_CONF} ${BOOT_CONF}
test -s ${CONF} || exit 0


configure() {
    mkdir -p ${RUN_DATA_DIR}
    ln -sf ${RUN_DATA_DIR} ${DATA_DIR}
    cp ${CONF} ${RUN_CONF}

    # if no specific name configured, use hostname
    if ! grep -E 'Name\s*=' ${RUN_CONF} &>/dev/null; then   
        sed -ri "s/(\[General\])/\1\nName = $(hostname)/" ${RUN_CONF}
    fi
}

start() {
    msg_begin "Configuring bluetooth"

    # adapter explicitly makred as unavailable from previous boot steps
    if [[ -f "${NO_ON_BOARD_BT}" ]]; then
        msg_fail "no adapter"
        return 1
    fi

    # wait for adapter to be reported by OS
    count=0
    while ! test -e ${ADAPTER_PATH}; do
        sleep 1
        count=$((count + 1))
        if [[ ${count} -ge ${ADAPTER_TIMEOUT} ]]; then
            msg_fail "no adapter"
            return 1
        fi
    done

    if configure; then
        msg_done
    else
        msg_fail
        return 1
    fi
    
    rfkill unblock bluetooth &>/dev/null
    
    msg_begin "Starting bluetoothd"
    ${PROG} &>/dev/null &

    # wait for adapter to be reported by bluetoothctl
    count=0
    while test -z "$(${PROG_CTL} list 2>/dev/null)"; do
        sleep 1
        count=$((count + 1))
        if [[ ${count} -ge ${ADAPTER_TIMEOUT} ]]; then
            msg_fail "no adapter"
            return 1
        fi
    done

    msg_done

    # if DiscoverableTimeout is set to 0, make adapter discoverable from boot time
    if grep -E '^DiscoverableTimeout\s*=\s*0$' ${RUN_CONF} &>/dev/null; then
        sleep 1
        ${PROG_CTL} discoverable on >/dev/null
    fi
}

stop() {
    msg_begin "Stopping bluetoothd"
    killall -q $(basename ${PROG})
    test $? == 0 && msg_done || msg_fail
}

case "$1" in
    start)
        start
        ;;
        
    stop)
        stop
        ;;
        
    restart)
        stop
        start
        ;;
    
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
esac

exit 0
